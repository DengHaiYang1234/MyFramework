1.定义：AssetBundle(简称AB包)是一个资源压缩包，包含模型、贴图、预制体、声音、甚至整个场景，可以在游戏运行的时候被加载;

2.作用：
	1.AssetBundle自身保存着互相的依赖关系;
	2.可有效的减小包体的大小

3.什么是AssetBundle：
	1.它是一个存在于硬盘上的文件。可以称之为压缩包。这个压缩包可以认为是一个文件夹，里面包含了多个文件。这些文件可以分为两类：serialized file 和 resource files。（序列化文件和源文件）

	serialized file：资源被打碎放在一个对象中，最后统一被写进一个单独的文件（只有一个）

	resource files：某些二进制资源（图片、声音）被单独保存，方便快速加载，可以Editor上读取，方便查看
	2.它是一个AssetBundle对象，我们可以通过代码从一个特定的压缩包加载出来的对象。这个对象包含了所有我们当初添加到这个压缩包里面的内容，我们可以通过这个对象加载出来使用。

4.BuildAssetBundleOptions

	BuildAssetBundleOptions.None：使用LZMA算法压缩，压缩的包更小，但是加载时间更长。使用之前需要整体解压。一旦被解压，这个包会使用LZ4重新压缩。使用资源的时候不需要整体解压。在下载的时候可以使用LZMA算法，一旦它被下载了之后，它会使用LZ4算法保存到本地上。

	BuildAssetBundleOptions.UncompressedAssetBundle：不压缩，包大，加载快
	
BuildAssetBundleOptions.ChunkBasedCompression：使用LZ4压缩，压缩率没有LZMA高，但是我们可以加载指定资源而不用解压全部。
注意:使用LZ4压缩，可以获得可以跟不压缩想媲美的加载速度，而且比不压缩文件要小。

5.AB加载方式：
	

AssetBundle.LoadFromFile 从本地加载

	AssetBundle.LoadFromMemory 从内存加载
	
WWW.LoadFromCacheOrDownload 下载后放在缓存中备用(该方法逐渐被弃用)
	
UnityWebRequest 从服务器下载

6.从AB中加载资源：

	
AssetBundle.LoadAsset(assetName)

	AssetBundle.LoadAllAssets() 加载AB包中所有的对象，不包含依赖的包

	AssetBundle.LoadAssetAsync() 异步加载，加载较大资源的时候

	AssetBundle.LoadAllAssetsAsync() 异步加载全部资源

	AssetBundle.LoadAssetWithSubAssets 加载资源及其子资源

7.AssetBundle分组策略：
	一个UI界面或者所有UI界面一个包（这个界面里面的贴图和布局信息一个包）
	
一个角色或者所有角色一个包（这个角色里面的模型和动画一个包）

	所有的场景所共享的部分一个包（包括贴图和模型）
	
按照类型分组
所有声音资源打成一个包，所有shader打成一个包，所有模型打成一个包，所有材质打成一个包
	
按照使用分组
把在某一时间内使用的所有资源打成一个包。可以按照关卡分，一个关卡所需要的所有资源包括角色、贴图、声音等打成一个包。也可以按照场景分，一个场景所需要的资源一个包
	
	注意
	经常更新的资源放在一个单独的包里面，跟不经常更新的包分离
	把需要同时加载的资源放在一个包里面
	可以把其他包共享的资源放在一个单独的包里面
	把一些需要同时加载的小资源打包成一个包
	如果对于一个同一个资源有两个版本，可以考虑通过后缀来区分，例如v1、v2、v3




框架：
	打包流程：

	1.只需将需要打包的资源放入特定的文件夹，手动或自动设置三种打包粒度（粗、细、适中） + Lua打包方式，文件搜索路径，匹配模式等，便可完成自动打包
	
	2.剔除已被打包的资源或依赖资源，避免资源杂糅并检测是否存在重复资源

	3.根据采取的打包方式不同，生成详细配置文件（每个AB包所包含的所有依赖文件）

	资源维护：
	
	1.提供三种资源加载方式：直接加载项目资源、从AB包加载资源、异步从AB包加载资源

	2.资源缓存，避免重复加载，并提升加载速度

	3.依赖资源检测。加载每份资源时，检测对应的依赖资源是否已完成加载或缓存

	4.自动维护对应Asset资源或AB资源的引用数量的增加或减少

	5.根据资源的引用数量自动删除或彻底清除相关资源
	